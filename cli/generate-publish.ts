import chalk from 'chalk';
import fs from 'fs-extra';
import inquirer from 'inquirer';

interface PublishConfig {
  resturl: string;
  path: string;
  circuit_size: string;
  address: string;
  priv: string;
  description: string;
  creator_paid_proof: boolean;
  creator_only_add_prove_task: boolean;
  auto_submit_network_ids?: string;
  import_data_image?: string;
}

export async function generatePublishScript(): Promise<void> {
  console.log(chalk.blue('üìÑ Generating publish script for zkWasm hub...\n'));
  
  // Collect configuration
  const config = await collectPublishConfig();
  
  // Generate script
  const script = generateScript(config);
  
  // Write script to file
  const scriptPath = './ts/publish.sh';
  await fs.writeFile(scriptPath, script);
  await fs.chmod(scriptPath, '755');
  
  console.log(chalk.green(`‚úÖ Publish script generated: ${scriptPath}`));
  console.log(chalk.blue('\nüìñ Usage:'));
  console.log('   cd ts && ./publish.sh');
  console.log('   # or');
  console.log('   zkwasm publish');
  
  // Ask if user wants to run the script now
  const { runNow } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'runNow',
      message: 'Would you like to run the publish script now?',
      default: false
    }
  ]);
  
  if (runNow) {
    console.log(chalk.blue('\nüöÄ Running publish script...'));
    const { spawn } = await import('child_process');
    
    const publishProcess = spawn('bash', ['publish.sh'], {
      stdio: 'inherit',
      cwd: './ts'
    });
    
    publishProcess.on('close', (code: number | null) => {
      if (code === 0) {
        console.log(chalk.green('\n‚úÖ Publish completed successfully!'));
      } else {
        console.error(chalk.red(`\n‚ùå Publish failed with code ${code}`));
      }
    });
    
    publishProcess.on('error', (error: Error) => {
      console.error(chalk.red(`\n‚ùå Failed to run publish script: ${error.message}`));
    });
  }
}

async function collectPublishConfig(): Promise<PublishConfig> {
  console.log(chalk.blue('‚öôÔ∏è  Configure publish parameters:\n'));
  
  const questions = [
    {
      type: 'input',
      name: 'resturl',
      message: 'zkWasm hub API endpoint:',
      default: 'https://rpc.zkwasmhub.com:8090'
    },
    {
      type: 'input',
      name: 'path',
      message: 'WASM file path:',
      default: 'node_modules/zkwasm-ts-server/src/application/application_bg.wasm'
    },
    {
      type: 'input',
      name: 'circuit_size',
      message: 'Circuit size:',
      default: '22'
    },
    {
      type: 'input',
      name: 'address',
      message: 'Wallet address (or set ZKWASM_ADDRESS env var):',
      default: process.env.ZKWASM_ADDRESS || ''
    },
    {
      type: 'password',
      name: 'priv',
      message: 'Private key (or set ZKWASM_PRIVATE_KEY env var):',
      default: process.env.ZKWASM_PRIVATE_KEY || '',
      mask: '*'
    },
    {
      type: 'input',
      name: 'description',
      message: 'Image description:',
      default: 'zkWasm application'
    },
    {
      type: 'confirm',
      name: 'creator_paid_proof',
      message: 'Creator pays for proofs?',
      default: false
    },
    {
      type: 'confirm',
      name: 'creator_only_add_prove_task',
      message: 'Only creator can add prove tasks?',
      default: false
    },
    {
      type: 'input',
      name: 'auto_submit_network_ids',
      message: 'Auto-submit network IDs (comma-separated, optional):',
      default: ''
    },
    {
      type: 'input',
      name: 'import_data_image',
      message: 'Import data from existing image (optional):',
      default: ''
    }
  ];
  
  const answers = await inquirer.prompt(questions);
  
  return {
    ...answers,
    auto_submit_network_ids: answers.auto_submit_network_ids || undefined,
    import_data_image: answers.import_data_image || undefined
  };
}

function generateScript(config: PublishConfig): string {
  const script = `#!/bin/bash
# zkWasm Publish Script
# Generated by zkwasm-cli

set -e

echo "üöÄ Publishing to zkWasm hub..."

# Configuration
RESTURL="${config.resturl}"
WASM_PATH="${config.path}"
CIRCUIT_SIZE="${config.circuit_size}"
DESCRIPTION="${config.description}"
CREATOR_PAID_PROOF="${config.creator_paid_proof}"
CREATOR_ONLY_ADD_PROVE_TASK="${config.creator_only_add_prove_task}"

# Environment variables (can be overridden)
ADDRESS=\${ZKWASM_ADDRESS:-"${config.address}"}
PRIV=\${ZKWASM_PRIVATE_KEY:-"${config.priv}"}

# Validate required parameters
if [ -z "$ADDRESS" ]; then
    echo "‚ùå Error: Wallet address not provided"
    echo "   Set ZKWASM_ADDRESS environment variable or edit this script"
    exit 1
fi

if [ -z "$PRIV" ]; then
    echo "‚ùå Error: Private key not provided"
    echo "   Set ZKWASM_PRIVATE_KEY environment variable or edit this script"
    exit 1
fi

if [ ! -f "$WASM_PATH" ]; then
    echo "‚ùå Error: WASM file not found: $WASM_PATH"
    echo "   Please build the project first: make build"
    exit 1
fi

echo "üì¶ Publishing WASM file: $WASM_PATH"
echo "üåê Target endpoint: $RESTURL"
echo "üë§ Address: $ADDRESS"

# Build command
CMD="zkwasm-service-cli add-image \\
    --resturl \\"$RESTURL\\" \\
    --path \\"$WASM_PATH\\" \\
    --circuit_size \\"$CIRCUIT_SIZE\\" \\
    --address \\"$ADDRESS\\" \\
    --priv \\"$PRIV\\" \\
    --description \\"$DESCRIPTION\\" \\
    --creator_paid_proof \\"$CREATOR_PAID_PROOF\\" \\
    --creator_only_add_prove_task \\"$CREATOR_ONLY_ADD_PROVE_TASK\\""

# Add optional parameters
${config.auto_submit_network_ids ? `CMD="$CMD --auto_submit_network_ids \\"${config.auto_submit_network_ids}\\""` : ''}
${config.import_data_image ? `CMD="$CMD --import_data_image \\"${config.import_data_image}\\""` : ''}

echo "üîß Running command:"
echo "$CMD"
echo ""

# Execute command and capture output
OUTPUT=$(eval $CMD 2>&1)
EXIT_CODE=$?

echo "$OUTPUT"

# Check for specific error patterns first (more reliable than exit code)
if echo "$OUTPUT" | grep -q "already exists"; then
    echo ""
    echo "‚ÑπÔ∏è  Image already exists on zkWasm hub"
    echo "‚úÖ No action needed - image is ready for deployment"
    exit 0
elif [ $EXIT_CODE -ne 0 ]; then
    echo ""
    echo "‚ùå Publish failed with exit code $EXIT_CODE"
    echo "Please check the error message above"
    exit $EXIT_CODE
else
    echo ""
    echo "‚úÖ Image published successfully!"
    echo "üîç You can now run 'zkwasm check' to verify deployment readiness"
fi
`;

  return script;
} 